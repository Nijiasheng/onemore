; --------------------------------------------------------------------------------
; @Title: Menu File for TRACE32 Linux Awareness
; @Description: -
; @Keywords: Linux menu awareness
; @Author: DIE KJM AME
; @Copyright: (C) 1989-2021 Lauterbach GmbH, licensed for use with TRACE32(R) only
; --------------------------------------------------------------------------------
; $Id: linux.m 8174 2022-11-11 06:41:08Z amerkle $

NAME "TASK.LINUX"

IF !MENU.EXIST("TASK.LINUX")
(

ADD
MENU
(
  POPUP "Linux"
  (
    DEFAULT
    MENUITEM "[:objects]Display &Processes" "TASK.Process"
    MENUITEM "[:objects]Display &ps-like"   "TASK.PS"
    MENUITEM "[:objects]Display &Tasks"     "TASK.DTask"
    MENUITEM "[:objects]Display &Modules"   "TASK.MODule"
    POPUP "[:objects]Display &File System"
    (
        MENUITEM "[:objects]Display FS Types"         "TASK.FS.Types"
        MENUITEM "[:objects]Display Mount Points"     "TASK.FS.Mount"
        MENUITEM "[:objects]Display Mounted Devices"  "TASK.FS.MountDevs"
        MENUITEM "[:objects]Display /proc"            "TASK.FS.PROC"
        MENUITEM "[:objects]Display /sys"             "TASK.FS.SYS"
        MENUITEM "[:objects]Display Partitions"       "TASK.FS.PART"
    )
    SEPARATOR
    POPUP "&Process Debugging"
    (
      MENUITEM "[:symbols]&Load Symbols..."
      (
        DIALOG
        (
          HEADER "TASK.sYmbol.LOAD"
          POS 0. 0. 30. 3.
          BOX "Process name"
          POS 1. 1. 20. 1.
procl:    DEFEDIT "" ""
          POS 22. 1. 7. 1.
          BUTTON "Browse..."
          (
            PRIVATE &sFile
            DIALOG.FILE "*"
            ENTRY %LINE &sFile
            DIALOG.SET procl "&sFile"
          )
          POS 6. 3. 7. 1.
          DEFBUTTON "Ok"
          (
            PRIVATE &procl &cwd
            &procl=DIALOG.STRING(procl)
            TASK.sYmbol.LOAD "&procl"
            DIALOG.END
          )
          POS 17. 3. 7. 1.
          BUTTON "Cancel"  "DIALOG.END"
        )
      )
      MENUITEM "[:symbols]&Delete Symbols..."
      (
        DIALOG
        (
          HEADER "TASK.sYmbol.DELete"
          POS 0. 0. 30. 3.
          BOX "Process name"
          POS 1. 1. 20. 1.
procd:    DEFEDIT "" ""
          POS 22. 1. 7. 1.
          BUTTON "Browse..."
          (
            PRIVATE &sFile
            DIALOG.FILE "*"
            ENTRY %LINE &sFile
            DIALOG.SET procd "&sFile"
          )
          POS 6. 3. 7. 1.
          DEFBUTTON "Ok"
          (
            PRIVATE &procd
            &procd=DIALOG.STRING(procd)
            TASK.sYmbol.DELete "&procd"
            DIALOG.END
          )
          POS 17. 3. 7. 1.
          BUTTON "Cancel"  "DIALOG.END"
        )
      )
      MENUITEM "Debug New Process..."
      (
        PRIVATE &sPath &sOptionMachineName
        IF (PRACTICE.FUNCtion.AVAILable(SYStem.Option.MACHINESPACES))
        (
          IF (SYStem.Option.MACHINESPACES()&&(""!=""))
          (
            SPRINTF &sOptionMachineName "/MACHINE %s" STRing.SPLIT("",".",0.)
          )
        )
        &sPath=OS.FILE.JOINPATH(TASK.GETDIR(),"app_debug.cmm")
        IF OS.FILE("&sPath")
        (
          DO "&sPath" /DIALOG &sOptionMachineName
          ENDDO
        )
        &sPath=OS.FILE.JOINPATH(TASK.GETDIR(),"../awareness","app_debug.cmm")
        IF OS.FILE("&sPath")
        (
          DO "&sPath" /DIALOG &sOptionMachineName
          ENDDO
        )
        PRINT %ERROR "File ""app_debug.cmm"" not found. Please contact support@lauterbach.com ."
      )
      ADDHERE
      POPUP "&Watch Processes"
      (
        MENUITEM "[:plus]&Add..."
        (
          DIALOG
          (
            HEADER "TASK.Watch.Add"
            POS 0. 0. 24. 3.
            BOX "Process name"
            POS 1. 1. 22. 1.
wproca:     DEFEDIT "" ""
            POS 2. 3. 7. 1.
            DEFBUTTON "Ok"
            (
              PRIVATE &wproca
              &wproca=DIALOG.STRING(wproca)
              TASK.Watch.View "&wproca"
              DIALOG.END
            )
            POS 15. 3. 7. 1.
            BUTTON "Cancel"  "DIALOG.END"
          )
        )
        MENUITEM "[:remove]&Remove..."
        (
          DIALOG
          (
            HEADER "TASK.Watch.DELete"
            POS 0. 0. 24. 3.
            BOX "Process name"
            POS 1. 1. 22. 1.
wprocd:     DEFEDIT "" ""
            POS 2. 3. 7. 1.
            DEFBUTTON "Ok"
            (
              PRIVATE &wprocd
              &wprocd=DIALOG.STRING(wprocd)
              TASK.Watch.DELete "&wprocd"
              DIALOG.END
            )
            POS 15. 3. 7. 1.
            BUTTON "Cancel"  "DIALOG.END"
          )
        )
      )
      SEPARATOR
      MENUITEM "[:mmu]Display Process MMU Tables"
      (
        DIALOG
        (
            HEADER "MMU.List TaskPageTable"
            POS 0. 0. 24. 3.
            BOX "Process name"
            POS 1. 1. 22. 1.
wproca1:    DEFEDIT "" ""
            POS 2. 3. 7. 1.
            DEFBUTTON "Ok"
            (
              ; <tbd> Hypervisor handling
              PRIVATE &wproca
              &wproca=DIALOG.STRING(wproca1)
              MMU.List TaskPageTable "&wproca"
              DIALOG.END
            )
            POS 15. 3. 7. 1.
            BUTTON "Cancel"  "DIALOG.END"
        )
      )
      MENUITEM "[:mmu]Display Kernel MMU Tables" "MMU.List KernelPageTable"
    )
    POPUP "&Module Debugging"
    (
      MENUITEM "[:symbols]&Load Symbols..."
      (
        DIALOG
        (
          HEADER "TASK.sYmbol.LOADMod"
          POS 0. 0. 30. 3.
          BOX "Module name"
          POS 1. 1. 20. 1.
modl:     DEFEDIT "" ""
          POS 22. 1. 7. 1.
          BUTTON "Browse..."
          (
            PRIVATE &sFile
            DIALOG.FILE "*.ko"
            ENTRY %LINE &sFile
            DIALOG.SET modl "&sFile"
          )
          POS 6. 3. 7. 1.
          DEFBUTTON "Ok"
          (
            PRIVATE &modl
            &modl=DIALOG.STRING(modl)
            TASK.sYmbol.Option AutoLoad Module
            TASK.sYmbol.LOADMod "&modl"
            DIALOG.END
          )
          POS 17. 3. 7. 1.
          BUTTON "Cancel"  "DIALOG.END"
        )
      )
      MENUITEM "[:symbols]&Delete Symbols..."
      (
        DIALOG
        (
          HEADER "TASK.sYmbol.DELeteMod"
          POS 0. 0. 30. 3.
          BOX "Module name"
          POS 1. 1. 20. 1.
modd:     DEFEDIT "" ""
          POS 22. 1. 7. 1.
          BUTTON "Browse..."
          (
            PRIVATE &sFile
            DIALOG.FILE "*.ko"
            ENTRY %LINE &sFile
            DIALOG.SET modd "&sFile"
          )
          POS 6. 3. 7. 1.
          DEFBUTTON "Ok"
          (
            PRIVATE &modd
            &modd=DIALOG.STRING(modd)
            TASK.sYmbol.DELeteMod "&modd"
            DIALOG.END
          )
          POS 17. 3. 7. 1.
          BUTTON "Cancel"  "DIALOG.END"
        )
      )
      MENUITEM "Debug Module on init..."
      (
        PRIVATE &sPath &sOptionMachineName
        IF (PRACTICE.FUNCtion.AVAILable(SYStem.Option.MACHINESPACES))
        (
          IF (SYStem.Option.MACHINESPACES()&&(""!=""))
          (
            SPRINTF &sOptionMachineName "/MACHINE %s" STRing.SPLIT("",".",0.)
          )
        )
        &sPath=OS.FILE.JOINPATH(TASK.GETDIR(),"mod_debug.cmm")
        IF OS.FILE("&sPath")
        (
          DO "&sPath" /DIALOG &sOptionMachineName
          ENDDO
        )
        &sPath=OS.FILE.JOINPATH(TASK.GETDIR(),"../awareness","mod_debug.cmm")
        IF OS.FILE("&sPath")
        (
          DO "&sPath" /DIALOG &sOptionMachineName
          ENDDO
        )
        PRINT %ERROR "File ""mod_debug.cmm"" not found. Please contact support@lauterbach.com ."
      )
      SEPARATOR
      MENUITEM "[:mmu]Display Kernel MMU Tables" "MMU.List KernelPageTable"
    )
    POPUP "&Library Debugging"
    (
      MENUITEM "[:symbols]&Load Symbols..."
      (
        DIALOG
        (
          HEADER "TASK.sYmbol.LOADLib"
          POS 0. 0. 30. 3.
          BOX "Process name"
          POS 1. 1. 28. 1.
libpl:    DEFEDIT "" ""
          POS 0. 3. 30. 3.
          BOX "Library name"
          POS 1. 4. 20. 1.
libll:    DEFEDIT "" ""
          POS 22. 4. 7. 1.
          BUTTON "Browse..."
          (
            PRIVATE &sFile
            DIALOG.FILE "*.so*"
            ENTRY %LINE &sFile
            DIALOG.SET libll "&sFile"
          )
          POS 6. 6. 7. 1.
          DEFBUTTON "Ok"
          (
            PRIVATE &libpl &libll
            &libpl=DIALOG.STRING(libpl)
            &libll=DIALOG.STRING(libll)
            TASK.sYmbol.LOADLib "&libpl" "&libll"
            DIALOG.END
          )
          POS 17. 6. 7. 1.
          BUTTON "Cancel"  "DIALOG.END"
        )
      )
      MENUITEM "[:symbols]&Delete Symbols..."
      (
        DIALOG
        (
          HEADER "TASK.sYmbol.DELeteLib"
          POS 0. 0. 30. 3.
          BOX "Process name"
          POS 1. 1. 28. 1.
libpd:    DEFEDIT "" ""
          POS 0. 3. 30. 3.
          BOX "Library name"
          POS 1. 4. 20. 1.
libld:    DEFEDIT "" ""
          POS 22. 4. 7. 1.
          BUTTON "Browse..."
          (
            PRIVATE &sFile
            DIALOG.FILE "*.so*"
            ENTRY %LINE &sFile
            DIALOG.SET libld "&sFile"
          )
          POS 6. 6. 7. 1.
          DEFBUTTON "Ok"
          (
            PRIVATE &libpd &libld
            &libpd=DIALOG.STRING(libpd)
            &libld=DIALOG.STRING(libld)
            TASK.sYmbol.DELeteLib "&libpd" "&libld"
            DIALOG.END
          )
          POS 17. 6. 7. 1.
          BUTTON "Cancel"  "DIALOG.END"
        )
      )
      SEPARATOR
      MENUITEM "[:mmu]Display Process MMU Tables"
      (
        DIALOG
        (
            HEADER "MMU.List TaskPageTable"
            POS 0. 0. 24. 3.
            BOX "Process name"
            POS 1. 1. 22. 1.
wproca2:    DEFEDIT "" ""
            POS 2. 3. 7. 1.
            DEFBUTTON "Ok"
            (
              ; <tbd> Hypervisor handling
              PRIVATE &wproca
              &wproca=DIALOG.STRING(wproca2)
              MMU.List TaskPageTable "&wproca"
              DIALOG.END
            )
            POS 15. 3. 7. 1.
            BUTTON "Cancel"  "DIALOG.END"
        )
      )
      MENUITEM "[:mmu]Display Kernel MMU Tables" "MMU.List KernelPageTable"
    )
    SEPARATOR
    POPUP "[:symbols]Symbol &Autoloader"
    (
        MENUITEM "[:symbols]List Components"  "sYmbol.AutoLOAD.List"
        MENUITEM "[:init]Check Now!"          "sYmbol.AutoLOAD.CHECK"
        MENUITEM "[:objects]Components"
        (
DIALOG
(&+
  HEADER "TASK.sYmbol.Option AutoLoad"
  POS 0. 0. 25.
  proc: CHECKBOX "Process (Processes)"
  (
  IF DIALOG.BOOLEAN(proc)
    TASK.sYmbol.Option AutoLoad Process
  ELSE
    TASK.sYmbol.Option AutoLoad NoProcess
  )
  mod:  CHECKBOX "Module (Modules)"
  (
    IF DIALOG.BOOLEAN(mod)
      TASK.sYmbol.Option AutoLoad Module
    ELSE
      TASK.sYmbol.Option AutoLoad NoModule
  )
  lib:  CHECKBOX "Library (All Libraries)"
  (
    IF DIALOG.BOOLEAN(lib)
      TASK.sYmbol.Option AutoLoad Library
    ELSE
      TASK.sYmbol.Option AutoLoad NoLibrary
    DIALOG.SET clib FALSE()
  )
  clib: CHECKBOX "CurrLib (Libraries of Current Process)"
  (
    IF DIALOG.BOOLEAN(clib)
      TASK.sYmbol.Option AutoLoad CurrLib
    ELSE
      TASK.sYmbol.Option AutoLoad NoLibrary
    DIALOG.SET lib FALSE()
  )
  POS 0. 4. 12.
  BUTTON "[:symbols]List" "sYmbol.AutoLOAD.List"
  POS 13. 4. 12.
  BUTTON "[:init]Check"   "sYmbol.AutoLOAD.CHECK"
)
DIALOG.SET proc ((task.y.o(autoload)&0x1)!=0)
DIALOG.SET mod  ((task.y.o(autoload)&0x4)!=0)
DIALOG.SET lib  ((task.y.o(autoload)&0x2)!=0)
DIALOG.SET clib ((task.y.o(autoload)&0x8)!=0)
        )
        SEPARATOR
        MENUITEM "[:config]Config" "sYmbol.AutoLOAD.config"
        MENUITEM "Set Target Root Path"
        (
            DIALOG
            (
                HEADER "TASK.sYmbol.Option ROOTPATH"
                POS 0. 0. 40. 3.
                BOX "target root path on host"
                POS 1. 1. 30. 1
rootdir:        edit "" ""
                POS 32. 1. 7. 1.
                BUTTON "Browse..."
                (
                    PRIVATE &sDir
                    DIALOG.dir "*"
                    ENTRY %LINE &sDir
                    DIALOG.SET rootdir "&sDir"
                )
                POS 4. 3.5 8.
                DEFBUTTON "Ok"
                (
                    PRIVATE &sDir
                    &sDir=DIALOG.STRING(rootdir)
                    TASK.sYmbol.Option ROOTPATH "&sDir"
                    DIALOG.END
                )
                POS 16. 3.5 8.
                BUTTON "Cancel" "DIALOG.END"
                POS 28. 3.5 8.
                BUTTON "Help" "HELP __RTOS_LINUX_S__TASK_Y_O_ROOTPATH"
            )
        )
        SEPARATOR
        MENUITEM "[:manual]Symbol Autoloader Help" "HELP __RTOS_LINUX_S_.LINK.SymbolAutoLoader"
    )
    SEPARATOR
    MENUITEM "[:config]&Options..."
    (
DIALOG.view
(&+
          HEADER "Options..."
  
          POS  0. 0. 20. 10.
          BOX "TASK.Option"

          POS  1. 1. 17. 3.
          BOX "THREADING"
          POS 2. 2. 15. 1.
TG:       CHECKBOX "TGroup"
          (
            IF DIALOG.BOOLEAN(TG)
              TASK.Option THREADING TGROUP ON
            ELSE
              TASK.Option THREADING TGROUP OFF
          )

          POS  1. 4. 17. 3.
          BOX "NAMEMODE"
          POS 2. 5. 15. 1.
NAMEMD:   PULLDOWN "COMM,TASKNAME,ARG0,ARG0COMM"
          (
            PRIVATE &sMode
            &sMode=DIALOG.STRing(NAMEMD)
            TASK.Option NAMEMODE &sMode
          )

          POS  1. 7. 17. 1.
THRCTX:   CHECKBOX "THRCTX"
          (
            IF DIALOG.BOOLEAN(THRCTX)
              TASK.Option THRCTX ON
            ELSE
              TASK.Option THRCTX OFF
          )

          POS  1. 8. 17. 1.
SIDCACHE: CHECKBOX "SIDCACHE"
          (
            IF DIALOG.BOOLEAN(SIDCACHE)
              TASK.Option SIDCACHE ON
            ELSE
              TASK.Option SIDCACHE OFF
          )

; --------------------------------------------------------------------------------

          POS  21. 0. 20. 10.
          BOX "TASK.sYmbol.Option"

          POS  22. 1. 17. 7.
          BOX "AutoLoad"
          POS 23. 2. 15. 1.
PROCESS:  CHECKBOX "PROCESS"
          (
            IF DIALOG.BOOLEAN(PROCESS)
              TASK.sYmbol.Option AutoLoad Process
            ELSE
              TASK.sYmbol.Option AutoLoad NoProcess
          )
          POS 23. 3. 15. 1.
MODULE:   CHECKBOX "MODULE"
          (
            IF DIALOG.BOOLEAN(MODULE)
              TASK.sYmbol.Option AutoLoad Module
            ELSE
              TASK.sYmbol.Option AutoLoad NoModule
          )
          POS 23. 4. 15. 1.
LIBRARY:  CHECKBOX "LIBRARY"
          (
            IF DIALOG.BOOLEAN(LIBRARY)
              TASK.sYmbol.Option AutoLoad Library
            ELSE
              TASK.sYmbol.Option AutoLoad NoLibrary
            DIALOG.Set CURRLIB FALSE()
          )
          POS 23. 5. 15. 1.
CURRLIB:  CHECKBOX "CURRLIB"
          (
            IF DIALOG.BOOLEAN(CURRLIB)
              TASK.sYmbol.Option AutoLoad CurrLib
            ELSE
              TASK.sYmbol.Option AutoLoad NoLibrary
            DIALOG.Set LIBRARY FALSE()
          )
          POS 23. 6. 15. 1.
VM:       CHECKBOX "VM"
          (
            IF DIALOG.BOOLEAN(VM)
              TASK.sYmbol.Option AutoLoad VM
            ELSE
              TASK.sYmbol.Option AutoLoad NoVM
          )

; --------------------------------------------------------------------------------

          POS  0. 10. 41. 3.
          BOX "TASK.sYmbol.Option"

          POS  1.  11. 10. 1.
          TEXT "ROOTPATH:"
          
          POS 11. 11. 25. 1.
RPATH:    EDIT ""
          (
            PRIVATE &sPath
            &sPath=DIALOG.STRing(RPATH)
            TASK.sYmbol.Option ROOTPATH "&sPath"
          )

          POS 37. 11. 3. 1.
          BUTTON "..."
          (
            PRIVATE &sPath
            DIALOG.DIR "*"
            ENTRY &sPath
            IF "&sPath"==""
              RETURN
            TASK.sYmbol.Option ROOTPATH "&sPath"
            DIALOG.Set RPATH "&sPath"
          )

; --------------------------------------------------------------------------------

          CLOSE "DIALOG.END"
)

DIALOG.Set TG       TASK.Option(threading)==1
DIALOG.Set THRCTX   TASK.Option(thrctx)==1
DIALOG.Set SIDCACHE TASK.Option(sidcache)==1

DIALOG.Set NAMEMD   STRing.SPLIT("COMM,TASKNAME,ARG0,ARG0COMM",",",TASK.Option(namemode))

DIALOG.Set PROCESS (TASK.Y.O(autoload)&0x01)!=0x0
DIALOG.Set MODULE  (TASK.Y.O(autoload)&0x04)!=0x0
DIALOG.Set LIBRARY (TASK.Y.O(autoload)&0x02)!=0x0
DIALOG.Set CURRLIB (TASK.Y.O(autoload)&0x08)!=0x0
DIALOG.Set VM      (TASK.Y.O(autoload)&0x20)!=0x0

DIALOG.Set RPATH    TASK.Y.O.S(rootpath)

    )
    SEPARATOR
    MENUITEM "[:objects]&Display Kernel Log" "TASK.DMESG"
POPUP "[:objects]&Display Device Tree"
(
  MENUITEM "[:objects]Display Device Tree"
  (
    TASK.DTB
  )
  MENUITEM "[:objects]Display Source"
  (
    TASK.DTS
  )
  MENUITEM "[:dump]Extract Blob To File"
  (
    PRIVATE &sPath &sExtdir &sOptionMachine
    &sExtdir=TASK.GETDIR()
    IF PRACTICE.FUNCtion.AVAILable(SYStem.Option.MACHINESPACES)
    (
      IF SYStem.Option.MACHINESPACES()
      (
        &sOptionMachine=STRing.CUT("/MACHINE ",-1.)
      )
    )
    &sPath=OS.FILE.JOINPATH("&sExtdir","extract_dtb.cmm")
    IF OS.FILE("&sPath")
    (
      DO "&(sPath)" /DIALOG &sOptionMachine
      ENDDO
    )
    &sPath=OS.FILE.JOINPATH("&sExtdir","..","extract_dtb.cmm")
    IF OS.FILE("&sPath")
    (
      DO "&(sPath)" /DIALOG &sOptionMachine
      ENDDO
    )
    PRINT %ERROR "File ""extract_dtb.cmm" not found. Please contact support@lauterbach.com ."
  )
  MENUITEM "[:list]Save Source To File"
  (
    DIALOG
    (
            HEADER "Save Device Tree Source"
            POS 0. 0. 30. 3.
            BOX "File name"
            POS 1. 1. 20. 1.
dtsfile:    DEFEDIT "devicetree.dts" ""
            POS 22. 1. 7. 1.
            POS 6. 3. 7. 1.
            DEFBUTTON "Save"
            (
              PRIVATE &sDtsfile
              &sDtsfile=DIALOG.STRING(dtsfile)
              IF "&sDtsfile"!=""
              (
                PRinter.File "&sDtsfile"
                IF STATE.RUN()
                  Break
                EXT.MaxVSize 10000.
                WinPrint.TASK.DTS
                DIALOG.END
                EXT.MaxVSize 2000.
                ON ERROR CONTinue
                PRinter.select WIN
                ON ERROR inherit
              )
            )
            POS 17. 3. 7. 1.
            BUTTON "Cancel"  "DIALOG.END"
    )
  )
)
    POPUP "&other"
    (
        MENUITEM "[:objects]Display Vmalloc Info"      "TASK.VMAINFO"
        MENUITEM "[:objects]Display Network Devices"   "TASK.NET"
        POPUP "&Ftrace"
        (
           MENUITEM "[:objects]Display Ftrace Events"      "TASK.FTRACE.EVENTS"
           MENUITEM "[:objects]Display Ftrace Information" "TASK.FTRACE.STAT"
           MENUITEM "[:objects]Display Ftrace Data"        "TASK.FTRACE.TRACE"
        )
    )
    SEPARATOR
    MENUITEM "[:term]&Linux Terminal"
    (
      IF !window.name(term)
      (
        winpos ,,,,,, term
        TERM
      )
      ELSE
        wintop term
    )
    MENUITEM "[:config]Configure Terminal..."
    (
      TERM.RESet
      DO  ~~/demo/etc/terminal/serial/term.cmm

    )
    SEPARATOR
    IF PRACTICE.FUNCtion.AVAILable(SYStem.Option.MACHINESPACES)
    (
      IF !SYStem.Option.MACHINESPACES()
      (
        MENUITEM "[  X X X X X,XXXXXXXXXXXX, XxxxxxxxxXs,XXxxxxxxxxXs, XxxxxxxxxXX,XXxxxxxxxxXs, XxxxxxxxxXX,XXxxxxSSSSSSSS, XxxxxSBBwwwwwS,XXxxxxSBBwwwXwBS, XXXXXSBBwwwwwBB, XsXsXSBBBBBBBBB,      SBBWWWWWBB,      SBBWWWWWBB,      SBBWRRRWBB,       BBWWWWWBB]Generate RAM Dump"
        (
          PRIVATE &sPath
          &sPath=OS.FILE.JOINPATH(TASK.GETDIR(),"ramdump.cmm")
          IF OS.FILE("&sPath")
          (
            DO "&sPath" /DIALOG
            ENDDO
          )
          &sPath=OS.FILE.JOINPATH(TASK.GETDIR(),"../awareness","ramdump.cmm")
          IF OS.FILE("&sPath")
          (
            DO "&sPath" /DIALOG
            ENDDO
          )
          PRINT %ERROR "File ""ramdump.cmm"" not found. Please contact support@lauterbach.com ."
        )
      )
    )
    ELSE
    (
      MENUITEM "[  X X X X X,XXXXXXXXXXXX, XxxxxxxxxXs,XXxxxxxxxxXs, XxxxxxxxxXX,XXxxxxxxxxXs, XxxxxxxxxXX,XXxxxxSSSSSSSS, XxxxxSBBwwwwwS,XXxxxxSBBwwwXwBS, XXXXXSBBwwwwwBB, XsXsXSBBBBBBBBB,      SBBWWWWWBB,      SBBWWWWWBB,      SBBWRRRWBB,       BBWWWWWBB]Generate RAM Dump"
      (
        PRIVATE &sPath
        &sPath=OS.FILE.JOINPATH(TASK.GETDIR(),"ramdump.cmm")
        IF OS.FILE("&sPath")
        (
          DO "&sPath" /DIALOG
          ENDDO
        )
        &sPath=OS.FILE.JOINPATH(TASK.GETDIR(),"../awareness","ramdump.cmm")
        IF OS.FILE("&sPath")
        (
          DO "&sPath" /DIALOG
          ENDDO
        )
        PRINT %ERROR "File ""ramdump.cmm"" not found. Please contact support@lauterbach.com ."
      )
    )
    MENUITEM "[:btnok]Integrity Check" "TASK.CHECK"
  )
  POPUP "Trace"
  (
    POPUP "List"
    (
      SEPARATOR
      MENUITEM "[:alist]&Task Switches"     "Trace.List List.TASK"
      MENUITEM "[:alist]&Default and Tasks" "Trace.List List.TASK DEFault"
    )
  )
  POPUP "Perf"
  (
    SEPARATOR
    POPUP "&Task Runtime"
    (
      MENUITEM "&Prepare"
      (
        IF Trace.Method.Analyzer()
        (
          Analyzer.AutoInit ON
        )
        IF (ICE()||FIRE())&&!Analyzer.MODE.FLOW()
        (
          Analyzer.ReProgram
          (
            Sample.Enable IF AlphaBreak&&Write
          )
          Break.Delete /Alpha
          Break.Set task.config(magic)++(task.config(magicsize)-1) /Alpha
        )
        IF Analyzer.MODE.FLOW()
        (
          Break.Delete /TraceEnable
          Break.Set task.config(magic) /TraceEnable
        )
      )
      MENUITEM "[:perf]Show &Numerical"   "Trace.STATistic.TASK"
      MENUITEM "[:achart]Show as &Timing" "Trace.CHART.TASK"
      MENUITEM "[:achart]Tracking with Trace &List"
      (
        Trace.List List.TASK DEFault /Track
        Trace.CHART.TASK /Track
      )
    )
    POPUP "Task &Function Runtime"
    (
      MENUITEM "&Prepare"
      (
        IF Trace.Method.Analyzer()
        (
          Analyzer.AutoInit ON
          Analyzer.STATistic.PreFetch ON
        )

        IF (ICE()||FIRE())&&!Analyzer.MODE.FLOW()
        (
          IF Analyzer.CONFIG.HAC()
          (
             Analyzer.ReProgram
             (
               Sample.Enable IF AlphaBreak
               Sample.Enable IF BetaBreak
               Mark.A        IF AlphaBreak
               Mark.B        IF BetaBreak
             )
          )
          ELSE
          (
             Analyzer.ReProgram
             (
               Sample.Enable IF AlphaBreak||BetaBreak
               Mark.A IF AlphaBreak
               Mark.B IF BetaBreak
             )
          )
          Break.Delete /Alpha /Beta /Charly
          Break.SetFunc
          Break.Set task.config(magic)++(task.config(magicsize)-1) /Alpha
        )
        IF Analyzer.MODE.FLOW()
        (
          Break.Delete /TraceData
          Break.Set task.config(magic) /TraceData
        )
      )
      MENUITEM "[:perf]Show &Numerical"     "Trace.STATistic.TASKFUNC"
      MENUITEM "[:perf]Show as &Tree"       "Trace.STATistic.TASKTREE"
      MENUITEM "[:perf]Show &Detailed Tree" "Trace.STATistic.TASKTREE ALL"
      MENUITEM "[:achart]Show as &Timing"   "Trace.CHART.TASKFUNC"
      MENUITEM "[:alist]Show N&esting"      "Trace.List List.TASK FUNC TI.FUNC"
    )
  )
  POPUP "&Help"
  (
    MENUITEM "[:manual]OS Awareness Manual Linux" "HELP __RTOS_LINUX_S_"
    POPUP "[:manual]Training Manuals"
    (
      REPLACE
      MENUITEM "[:manual]OS Linux"             "HELP __TR_RTOS_LINUX_"
    )
  )
)


MENU "task.dt"
(
  DEFAULT
  MENUITEM "[:objects]Display detailed"
  (
    PRIVATE &nAddress
    &nAddress=ADDRESS.OFFSET(TRACK.ADDRESS())
    TASK.DTask &nAddress
  )
  MENUITEM "[:var]Display task struct"
  (
    PRIVATE &pAddress
    &pAddress=TRACK.ADDRESS()
    Var.View %Open %String (struct task_struct *)(&pAddress)
  )
  MENUITEM "[:objects]Display maps"
  (
    PRIVATE &nAddress
    &nAddress=ADDRESS.OFFSET(TRACK.ADDRESS())
    &nAddress=TASK.PROC.TCB(&nAddress)
    TASK.MAPS &nAddress
  )
  SEPARATOR
  MENUITEM "[:varframe]Display Stack Frame"
  (
    PRIVATE &pTrackAddress &sTask
    &pTrackAddress=TRACK.ADDRESS()
    &sTask=""
    IF PRACTICE.FUNCtion.AVAILable(SYStem.Option.MACHINESPACES)
    (
      IF SYStem.Option.MACHINESPACES()
      (
        SPRINTF &sTask "%u.:::%#x" ADDRESS.MACHINEID(&pTrackAddress) ADDRESS.OFFSET(&pTrackAddress)
      )
    )
    IF "&sTask"==""
    (
      SPRINTF &sTask "%#x" ADDRESS.OFFSET(&pTrackAddress)
    )
    Frame /Locals /Caller /TASK &sTask /MODule
  )
  MENUITEM "[:reg]Display Registers"
  (
    PRIVATE &pTrackAddress &sTask
    &pTrackAddress=TRACK.ADDRESS()
    &sTask=""
    IF PRACTICE.FUNCtion.AVAILable(SYStem.Option.MACHINESPACES)
    (
      IF SYStem.Option.MACHINESPACES()
      (
        SPRINTF &sTask "%u.:::%#x" ADDRESS.MACHINEID(&pTrackAddress) ADDRESS.OFFSET(&pTrackAddress)
      )
    )
    IF "&sTask"==""
    (
      SPRINTF &sTask "%#x" ADDRESS.OFFSET(&pTrackAddress)
    )
    Register /Task &sTask
  )
  MENUITEM "[:correlate]Switch Context"
  (
    PRIVATE &pTrackAddress &sTask
    &pTrackAddress=TRACK.ADDRESS()
    &sTask=""
    IF PRACTICE.FUNCtion.AVAILable(SYStem.Option.MACHINESPACES)
    (
      IF SYStem.Option.MACHINESPACES()
      (
        SPRINTF &sTask "%u.:::%#x" ADDRESS.MACHINEID(&pTrackAddress) ADDRESS.OFFSET(&pTrackAddress)
      )
    )
    IF "&sTask"==""
    (
      SPRINTF &sTask "%#x" ADDRESS.OFFSET(&pTrackAddress)
    )
    Register.TASK &sTask
  )
  SEPARATOR
  MENUITEM "[:symbols]Load Process Symbols"   "TASK.sYmbol.LOAD track.address()"
  MENUITEM "[:symbols]Delete Process Symbols" "TASK.sYmbol.DELete track.address()"
  MENUITEM "[:symbols]Add Libraries to Symbol Autoloader"
  (
    TASK.sYmbol.Option AutoLoad ProcLib track.address()
    sYmbol.AutoLOAD.CHECK
  )
  MENUITEM "Add to Watched Processes"
  (
    PRIVATE &nAddress
    &nAddress=ADDRESS.OFFSET(TRACK.ADDRESS())
    TASK.Watch.View &nAddress
  )
  MENUITEM "Delete from Watched Processes" "TASK.Watch.DELete track.address()"
  SEPARATOR
  MENUITEM "[:mmu]Display Task MMU Table"
  (
    PRIVATE &pTrackAddress &sTask
    &pTrackAddress=TRACK.ADDRESS()
    &sTask=""
    IF PRACTICE.FUNCtion.AVAILable(SYStem.Option.MACHINESPACES)
    (
      IF SYStem.Option.MACHINESPACES()
      (
        SPRINTF &sTask "%u.:::%#x" ADDRESS.MACHINEID(&pTrackAddress) ADDRESS.OFFSET(&pTrackAddress)
      )
    )
    IF "&sTask"==""
    (
      SPRINTF &sTask "%#x" ADDRESS.OFFSET(&pTrackAddress)
    )
    MMU.List TaskPageTable &sTask
  )
  SEPARATOR
  MENUITEM "[:dump]Dump task ENTRY"
  (
    PRIVATE &pVmAddress &nVmAddress &pAddress
    &pVmAddress=TRACK.ADDRESS()
    &nVmAddress=ADDRESS.OFFSET(&pVmAddress)
    &pAddress=&pVmAddress-&nVmAddress+TASK.PROC.TCB(&nVmAddress)
    Data.dump &pAddress /Long /DIALOG
  )
  SEPARATOR
  MENUITEM "Kill task"
  (
    PRIVATE &pVmAddress &nVmAddress &pAddress &sName &bYesNo
    &pVmAddress=TRACK.ADDRESS()
    &nVmAddress=ADDRESS.OFFSET(&pVmAddress)
    &pAddress=&pVmAddress-&nVmAddress+TASK.PROC.TCB(&nVmAddress)
    &sName=TASK.PROC.NAME(TASK.PROC.TCB(&nVmAddress))
    DIALOG.YESNO "Really kill task &(sName)?"
    ENTRY &bYesNo
    IF &bYesNo
    (
      Var.Set ((struct task_struct*)(&pAddress))->pending.signal.sig[0]=0x100
      PRINT "Signal SIGKILL sent to task &(sName)"
    )
  )
  SEPARATOR
  ENABLE (Analyzer()||Onchip())&&(ETM()||COMPonent.AVAILABLE("ETM"))
  MENUITEM "[:alist]Trace this task"
  (
    PRIVATE &magic &sid &cc &endaddr
    IF STATE.RUN()
      Break
    &magic=address.offset(track.address())
    &sid=TASK.PROC.MAGIC2SID(&magic)
    &cc=0
    &endaddr=0xffffffff
    IF ETM()
      &cc=ETM.CONTEXTCOMP()
    IF CPUIS64BIT()
      &endaddr=0xffffffffffffffff
    IF &cc>0
    (
      TrOnchip.ContextID ON
      Break.Set &sid:0--&endaddr /Program /TraceEnable /TASK &magic
    )
    ELSE
    (
      Break.Set TASK.CONFIG(magic) /Write /Data &magic /TraceON
      Break.Set TASK.CONFIG(magic) /Write /Data !&magic /TraceOFF
    )
  )
)


MENU "task.mod"
(
  DEFAULT
  ;(
  ;  &address=address.offset(track.address())
  ;  TASK.MODule &address
  ;)
  MENUITEM "[:var]Display module struct"
  (
    PRIVATE &pVmAddress &nVmAddress &pAddress
    &pVmAddress=TRACK.ADDRESS()
    &nVmAddress=ADDRESS.OFFSET(&pVmAddress)
    &pAddress=&pVmAddress-&nVmAddress+TASK.MOD.MCB(&nVmAddress)
    Var.View %Multiline %String (struct module*)(&pAddress)
  )
  SEPARATOR
  MENUITEM "[:symbols]Load Module Symbols"
  (
    TASK.sYmbol.Option AutoLoad Module
    TASK.sYmbol.LOADMod track.address()
  )
  MENUITEM "[:symbols]Delete Module Symbols" "TASK.sYmbol.DELeteMod track.address()"
  SEPARATOR
  MENUITEM "[:dump]Dump module ENTRY"
  (
    PRIVATE &pAddress
    &pAddress=TRACK.ADDRESS()
    Data.dump &pAddress /Long /DIALOG
  )
)


MENU "task.fs.t"
(
  DEFAULT
  MENUITEM "[:objects]Display detailed"
  (
    PRIVATE &nAddress
    &nAddress=ADDRESS.OFFSET(TRACK.ADDRESS())
    TASK.FS.Types &nAddress
  )
  MENUITEM "[:var]Display type struct"
  (
    PRIVATE &pAddress
    &pAddress=TRACK.ADDRESS()
    Var.View %Multiline %String (struct file_system_type*)(&pAddress)
  )
  SEPARATOR
  MENUITEM "[:dump]Dump type ENTRY"
  (
    PRIVATE &pAddress
    &pAddress=TRACK.ADDRESS()
    Data.dump &pAddress /Long /DIALOG
  )
)


MENU "task.fs.md"
(
  DEFAULT
  MENUITEM "[:objects]Display detailed"
  (
    PRIVATE &nAddress
    &nAddress=ADDRESS.OFFSET(TRACK.ADDRESS())
    TASK.FS.MountDevs &nAddress
  )
  MENUITEM "[:var]Display superblock struct"
  (
    PRIVATE &pAddress
    &pAddress=TRACK.ADDRESS()
    Var.View %Multiline %String (struct super_block*)(&pAddress)
  )
  SEPARATOR
  MENUITEM "[:dump]Dump superblock ENTRY"
  (
    PRIVATE &pAddress
    &pAddress=TRACK.ADDRESS()
    Data.dump &pAddress /Long /DIALOG
  )
)


MENU "task.fs.proc"
(
  ;DEFAULT
  ;MENUITEM "Display detailed"
  ;(
  ;  &address=address.offset(track.address())
  ;  TASK.FS.PROC &address
  ;)
  MENUITEM "[:var]Display proc struct"
  (
    PRIVATE &pAddress
    &pAddress=TRACK.ADDRESS()
    Var.View %Multiline %String (struct proc_dir_entry*)(&pAddress)
  )
  SEPARATOR
  MENUITEM "[:dump]Dump proc dir ENTRY"
  (
    PRIVATE &pAddress
    &pAddress=TRACK.ADDRESS()
    Data.dump &pAddress /Long /DIALOG
  )
)


MENU "task.fs.m"
(
  DEFAULT
  ;MENUITEM "Display detailed"
  ;(
  ;  &address=address.offset(track.address())
  ;  TASK.FS.Mount &address
  ;)
  MENUITEM "[:var]Display mount struct"
  (
    PRIVATE &pVmAddress &nVmAddress &pAddress
    &pVmAddress=TRACK.ADDRESS()
    &nVmAddress=ADDRESS.OFFSET(&pVmAddress)
    &pAddress=&pVmAddress-&nVmAddress+TASK.PROC.TCB(&nVmAddress)
    Var.View %Open %Hex %String (struct mount*)(&pAddress)
  )
  SEPARATOR
  MENUITEM "[:dump]Dump mount ENTRY"
  (
    PRIVATE &pVmAddress &nVmAddress &pAddress
    &pVmAddress=TRACK.ADDRESS()
    &nVmAddress=ADDRESS.OFFSET(&pVmAddress)
    &pAddress=&pVmAddress-&nVmAddress+TASK.PROC.TCB(&nVmAddress)
    Data.dump &pAddress /Long /DIALOG
  )
)

MENU "task.fs.part"
(
  MENUITEM "[:var]Display disk struct"
  (
    PRIVATE &pAddress
    &pAddress=TRACK.ADDRESS()
    Var.View %Multiline %String (struct gendisk*)(&pAddress)
  )
)

MENU "task.lib"
(
  DEFAULT
  ;MENUITEM "Display detailed"
  ;(
  ;  &address=address.offset(track.address())
  ;  TASK.DTask &address
  ;)
  MENUITEM "[:var]Display Library struct"
  (
    PRIVATE &pAddress
    &pAddress=TRACK.ADDRESS()
    Var.View %Multiline %String (struct vm_area_struct*)(&pAddress)
  )
  SEPARATOR
  MENUITEM "[:symbols]Load Library Symbols"   "TASK.sYmbol.LOADLib track.string() track.address()"
  MENUITEM "[:symbols]Delete Library Symbols" "TASK.sYmbol.DELeteLib track.string() track.address()"
  SEPARATOR
  MENUITEM "[:dump]Dump Library ENTRY"
  (
    PRIVATE &pAddress
    &pAddress=TRACK.ADDRESS()
    Data.dump &pAddress /Long /DIALOG
  )
)


MENU "task.w"
(
  DEFAULT
  MENUITEM "[:objects]Display Process"
  (
    PRIVATE &nAddress
    &nAddress=ADDRESS.OFFSET(TRACK.ADDRESS())
    TASK.DTask &nAddress
  )
  MENUITEM "[:exit]Delete from List"
  (
    PRIVATE &sName
    &sName=track.string()
    TASK.Watch.DELete "&sName"
  )
)

MENU "task.dmesg"
(
  DEFAULT
  MENUITEM "[:var]Display log struct"
  (
    PRIVATE &pAddress
    &pAddress=TRACK.ADDRESS()
    Var.View %Open (struct printk_log*)(&pAddress)
  )
  MENUITEM "[:dump]Dump log struct"
  (
    PRIVATE &pAddress
    &pAddress=TRACK.ADDRESS()
    Data.dump &pAddress
  )
)

MENU "ext.dtb.phandle"
(
  DEFAULT
  MENUITEM "[:objects]Display as phandle"
  (
    PRIVATE &nAddress
    &nAddress=ADDRESS.OFFSET(TRACK.ADDRESS())
    TASK.DTB.PHANDLE &nAddress
  )
)

MENU "ext.dtb.dump"
(
  DEFAULT
  MENUITEM "[:dump]Dump ENTRY"
  (
    PRIVATE &pAddress
    &pAddress=TRACK.ADDRESS()
    Data.dump &pAddress
  )
)

ADD
; Buttons for TASK.PS
BUTTONS "task.ps"
(
  MENUITEM "CONFIG"
  (
DIALOG.view
(&+
          HEADER "TASK.PS.CONFIG"

          POS 0. 0. 9. 12.
          BOX "Sort"
          POS 1. 1. 7. 1.
s.off:    CHOOSEBOX "OFF"   "TASK.PS.SORT OFF"
          POS 1. 2. 7. 1.
s.magic:  CHOOSEBOX "magic" "TASK.PS.SORT MAGIC"
          POS 1. 3. 7. 1.
s.pid:    CHOOSEBOX "pid"   "TASK.PS.SORT PID"
          POS 1. 4. 7. 1.
s.cmd:    CHOOSEBOX "cmd"   "TASK.PS.SORT CMD"
          POS 1. 5. 7. 1.
s.mem:    CHOOSEBOX "mem"   "TASK.PS.SORT MEM"
          POS 1. 6. 7. 1.
s.cpu:    CHOOSEBOX "%cpu"  "TASK.PS.SORT PCPU"

          POS 10. 0. 40. 12.
          BOX ""
          POS 10. 0. 12. 12.
          BOX "available"
          POS 30. 0. 12. 12.
          BOX "selected"
          POS 11. 1. 10. 10.
avail:    LISTBOX "magic,pid,cmd"
          (
            PRIVATE &sAddItem
            &sAddItem=DIALOG.STRing(avail)
            TASK.PS.ADD &sAddItem
            DIALOG.Set avail ""          TASK.PS.AVAILABLE()
            DIALOG.Set selec "&sAddItem" TASK.PS.SELECTED()
          )
          POS 31. 1. 10. 10.
selec:    LISTBOX "magic,pid,cmd"
          (
            PRIVATE &sDelItem
            &sDelItem=DIALOG.STRing(selec)
            TASK.PS.DELete &sDelItem
            DIALOG.Set avail "&sDelItem" TASK.PS.AVAILABLE()
            DIALOG.Set selec ""          TASK.PS.SELECTED()
          )
          POS 23. 4. 6. 1.
          BUTTON "->"
          (
            PRIVATE &sAddItem
            &sAddItem=DIALOG.STRing(avail)
            IF "&sAddItem"!=""
            (
              TASK.PS.ADD &sAddItem
              DIALOG.Set avail ""          TASK.PS.AVAILABLE()
              DIALOG.Set selec "&sAddItem" TASK.PS.SELECTED()
            )
          )
          POS 23. 6. 6. 1.
          BUTTON "<-"
          (
            PRIVATE &sDelItem
            &sDelItem=DIALOG.STRing(selec)
            IF "&sDelItem"!=""
            (
              TASK.PS.DELete &sDelItem
              DIALOG.Set avail "&sDelItem" TASK.PS.AVAILABLE()
              DIALOG.Set selec ""          TASK.PS.SELECTED()
            )
          )
          POS 43. 4. 6. 1.
          BUTTON "up"
          (
            PRIVATE &sItem
            &sItem=DIALOG.STRing(selec)
            IF "&sItem"!=""
            (
              TASK.PS.UP &sItem
              DIALOG.Set selec "&sItem" TASK.PS.SELECTED()
            )
          )
          POS 43. 6. 6. 1.
          BUTTON "down"
          (
            PRIVATE &sItem
            &sItem=DIALOG.STRing(selec)
            IF "&sItem"!=""
            (
              TASK.PS.DOWN &sItem
              DIALOG.Set selec "&sItem" TASK.PS.SELECTED()
            )
          )

          POS 1. 12. 10. 1.
thr:      CHECKBOX "show threads"
          (
            IF DIALOG.BOOLEAN(thr)
              TASK.PS.THREADS ON
            ELSE
              TASK.PS.THREADS OFF
          )
)
PRIVATE &sSort
&sSort=TASK.PS.SORT()
DIALOG.Set s.&sSort

DIALOG.Set avail "" TASK.PS.AVAILABLE()
DIALOG.Set selec "" TASK.PS.SELECTED()

DIALOG.Set thr TASK.PS.THREADS()!=0

ENDDO
  )
)

ADD
; Buttons for TASK.DMESG
BUTTONS "task.dmesg"
(
  MENUITEM "[:objects]Detailed" "TASK.DMESG /COLOR /DETAILED"
  MENUITEM "[:export]Export"
  (
PRIVATE &sLogfile &nLevels &nFacilities &bDetailed &bUseColors

&sLogfile=OS.FILE.JOINPATH(OS.PWD(),"dmesg.txt")

&nLevels=TASK.DMESG.VALUES(0)
&nFacilities=TASK.DMESG.VALUES(1)
&bDetailed=(TASK.DMESG.VALUES(2)&0x1)!=0
&bUseColors=(TASK.DMESG.VALUES(2)&0x2)!=0

DIALOG
(
         HEADER "Export kernel log"
         POS 0. 0. 40. 4.
         BOX "File name"
         POS 1. 1. 38. 1.
LOGFILE: EDIT "" ""
         POS 1. 2. 38. 1
PRTYPE:  PULLDOWN "ASCII,XHTML"
         (
           PRIVATE &sLogfile
           &sLogfile=DIALOG.STRing(LOGFILE)
           &sLogfile=STRing.CUT("&sLogfile",-STRing.LENgth(OS.FILE.EXTENSION("&sLogfile")))
           IF DIALOG.STRING(PRTYPE)=="ASCII"
             &sLogfile="&sLogfile"+".txt"
           ELSE
             &sLogfile="&sLogfile"+".html"
           DIALOG.SET LOGFILE "&sLogfile"
           RETURN
         )

         POS 0. 4. 19. 10.
         BOX "Log levels"
         POS 1. 5. 10. 1.
L0:      CHECKBOX "0-emerg" ""
         POS 1. 6. 10. 1.
L1:      CHECKBOX "1-alert" ""
         POS 1. 7. 10. 1.
L2:      CHECKBOX "2-crit" ""
         POS 1. 8. 10. 1.
L3:      CHECKBOX "3-err" ""
         POS 1. 9. 10. 1.
L4:      CHECKBOX "4-warn" ""
         POS 1. 10. 10. 1.
L5:      CHECKBOX "5-notice" ""
         POS 1. 11. 10. 1.
L6:      CHECKBOX "6-info" ""
         POS 1. 12. 10. 1.
L7:      CHECKBOX "7-debug" ""

         POS 20. 4. 20. 10.
         BOX "Log facilities"
         POS 21. 5. 10. 1.
F0:      CHECKBOX "0-kern" ""
         POS 21. 6. 10. 1.
F1:      CHECKBOX "1-user" ""
         POS 21. 7. 10. 1.
F2:      CHECKBOX "2-mail" ""
         POS 21. 8. 10. 1.
F3:      CHECKBOX "3-daemon" ""
         POS 21. 9. 10. 1.
F4:      CHECKBOX "4-auth" ""
         POS 21. 10. 10. 1.
F5:      CHECKBOX "5-syslog" ""
         POS 21. 11. 10. 1.
F6:      CHECKBOX "6-lpr" ""
         POS 21. 12. 10. 1.
F7:      CHECKBOX "7-news" ""

         POS 1. 14. 38. 1.
DET:     CHECKBOX "decode facility and level to readable string" ""

         POS 10. 16. 7. 1.
         BUTTON "Save"
         (
           PRIVATE &i &sParams &sLogfile &sFileType &nLevels &nFacilities &nSize
           &sParams=""
           &i=0.
           &nLevels=0x0
           &nFacilities=0x0
           RePeaT 8.
           (
             PRIVATE &sLabel
             SPRINTF &sLabel "L%u" &i
             IF DIALOG.BOOLEAN(&sLabel)
               &nLevels=&nLevels|(0x1<<(&i+1.))
             SPRINTF &sLabel "F%u" &i
             IF DIALOG.BOOLEAN(&sLabel)
               &nFacilities=&nFacilities|(0x1<<(&i+1.))
             &i=&i+1.
           )

           IF (&nLevels!=0x1fe)&&(&nLevels!=0)
           (
             &i=0.
             RePeaT 8.
             (
               IF (&nLevels&(0x1<<(&i+1.)))!=0
                 SPRINTF &sParams "%s /Level %u" "&sParams" &i
               &i=&i+1.
             )
           )

           IF (&nFacilities!=0x1fe)&&(&nFacilities!=0)
           (
             &i=0.
             RePeaT 8.
             (
               IF (&nFacilities&(0x1<<(&i+1.)))!=0
                 SPRINTF &sParams "%s /Facility %u" "&sParams" &i
               &i=&i+1.
             )
           )

           IF DIALOG.BOOLEAN(DET)
             &sParams="&sParams"+" /DETAILED"

           &nSize=TASK.DMESG.VALUES(3)
           &sFileType=DIALOG.STRing(PRTYPE)
           &sLogfile=DIALOG.STRing(LOGFILE)
           PRinter.FileType &sFileType
           PRinter.File &sLogfile
           IF &nSize>2000.
             EXT.MaxVSize &nSize+10.
           WinPrint.TASK.DMESG &sParams
           IF &nSize>2000.
             EXT.MaxVSize 2000.
           PRINT "Kernel log saved to &sLogfile"
           DIALOG.END
         )
         POS 20. 16. 7. 1.
         BUTTON "Cancel" "DIALOG.END"
)
DIALOG.SET LOGFILE "&sLogfile"
PRIVATE &i
&i=0.
RePeaT 8.
(
  PRIVATE &sLabel
  SPRINTF &sLabel "L%u" &i
  DIALOG.SET &sLabel (&nLevels&(1<<(&i+1.)))!=0
  SPRINTF &sLabel "F%u" &i
  DIALOG.SET &sLabel (&nFacilities&(1<<(&i+1.)))!=0
  &i=&i+1.
)
DIALOG.SET DET &bDetailed
ENDDO
  )
)

ADD
; Buttons for sYmbol.AutoLOAD.List
BUTTONS "y.aload.l"
(
  IF PRACTICE.FUNCtion.AVAILable(SYStem.Option.MACHINESPACES)
  (
    IF !SYStem.Option.MACHINESPACES()
    (
      WIDTH WIDEST
      MENUITEM "[:objects]Components"
      (
DIALOG
(&+
  HEADER "TASK.sYmbol.Option AutoLoad"
  POS 0. 0. 25.
  proc: CHECKBOX "Process (Processes)"
  (
  IF DIALOG.BOOLEAN(proc)
    TASK.sYmbol.Option AutoLoad Process
  ELSE
    TASK.sYmbol.Option AutoLoad NoProcess
  )
  mod:  CHECKBOX "Module (Modules)"
  (
    IF DIALOG.BOOLEAN(mod)
      TASK.sYmbol.Option AutoLoad Module
    ELSE
      TASK.sYmbol.Option AutoLoad NoModule
  )
  lib:  CHECKBOX "Library (All Libraries)"
  (
    IF DIALOG.BOOLEAN(lib)
      TASK.sYmbol.Option AutoLoad Library
    ELSE
      TASK.sYmbol.Option AutoLoad NoLibrary
    DIALOG.SET clib FALSE()
  )
  clib: CHECKBOX "CurrLib (Libraries of Current Process)"
  (
    IF DIALOG.BOOLEAN(clib)
      TASK.sYmbol.Option AutoLoad CurrLib
    ELSE
      TASK.sYmbol.Option AutoLoad NoLibrary
    DIALOG.SET lib FALSE()
  )
  POS 0. 4. 12.
  BUTTON "[:symbols]List" "sYmbol.AutoLOAD.List"
  POS 13. 4. 12.
  BUTTON "[:init]Check"   "sYmbol.AutoLOAD.CHECK"
)
DIALOG.SET proc ((task.y.o(autoload)&0x1)!=0)
DIALOG.SET mod  ((task.y.o(autoload)&0x4)!=0)
DIALOG.SET lib  ((task.y.o(autoload)&0x2)!=0)
DIALOG.SET clib ((task.y.o(autoload)&0x8)!=0)
      )
    )
  )
  ELSE
  (
    WIDTH WIDEST
    MENUITEM "[:objects]Components"
    (
DIALOG
(&+
  HEADER "TASK.sYmbol.Option AutoLoad"
  POS 0. 0. 25.
  proc: CHECKBOX "Process (Processes)"
  (
  IF DIALOG.BOOLEAN(proc)
    TASK.sYmbol.Option AutoLoad Process
  ELSE
    TASK.sYmbol.Option AutoLoad NoProcess
  )
  mod:  CHECKBOX "Module (Modules)"
  (
    IF DIALOG.BOOLEAN(mod)
      TASK.sYmbol.Option AutoLoad Module
    ELSE
      TASK.sYmbol.Option AutoLoad NoModule
  )
  lib:  CHECKBOX "Library (All Libraries)"
  (
    IF DIALOG.BOOLEAN(lib)
      TASK.sYmbol.Option AutoLoad Library
    ELSE
      TASK.sYmbol.Option AutoLoad NoLibrary
    DIALOG.SET clib FALSE()
  )
  clib: CHECKBOX "CurrLib (Libraries of Current Process)"
  (
    IF DIALOG.BOOLEAN(clib)
      TASK.sYmbol.Option AutoLoad CurrLib
    ELSE
      TASK.sYmbol.Option AutoLoad NoLibrary
    DIALOG.SET lib FALSE()
  )
  POS 0. 4. 12.
  BUTTON "[:symbols]List" "sYmbol.AutoLOAD.List"
  POS 13. 4. 12.
  BUTTON "[:init]Check"   "sYmbol.AutoLOAD.CHECK"
)
DIALOG.SET proc ((task.y.o(autoload)&0x1)!=0)
DIALOG.SET mod  ((task.y.o(autoload)&0x4)!=0)
DIALOG.SET lib  ((task.y.o(autoload)&0x2)!=0)
DIALOG.SET clib ((task.y.o(autoload)&0x8)!=0)
    )
  )
)

)
